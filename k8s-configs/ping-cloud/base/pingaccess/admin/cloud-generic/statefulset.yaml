# This defines the pingaccess admin deployment.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pingaccess-admin
  labels:
    cluster: pingaccess-cluster
    role: pingaccess-admin
spec:
  selector:
    matchLabels:
      role: pingaccess-admin
  replicas: 1
  serviceName: pingaccess-admin
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      name: pingaccess-admin
      labels:
        cluster: pingaccess-cluster
        role: pingaccess-admin
        entitled-app: "true"
        pod-reaper: enabled
      annotations:
        lastUpdateReason: "NA"
    spec:
      serviceAccountName: ping-serviceaccount
      initContainers:
      - name: pingaccess-init
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/toolkit:v1.22.0
        imagePullPolicy: IfNotPresent
        command:
        - /copy-dependencies.sh
        volumeMounts:
        - name: ssh-dir
          mountPath: /.ssh
        - name: data-dir
          mountPath: /data
        - name: ssh-id-key-secret
          mountPath: /id_rsa
          subPath: id_rsa
        - name: known-hosts-config
          mountPath: /known_hosts
          subPath: known_hosts
        - name: pingaccess-init
          mountPath: /copy-dependencies.sh
          subPath: copy-dependencies.sh
        - name: pingaccess-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        - name: pingaccess-init
          mountPath: /logger.lib.sh
          subPath: logger.lib.sh
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
      - name: wait-for-services
        # FIXME PDO-3576: switch to same user as app
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/busybox:1.36
        imagePullPolicy: IfNotPresent
        command:
        - /wait-for-services.sh
        volumeMounts:
        - name: pingaccess-init
          mountPath: /utils.lib.sh
          subPath: utils.lib.sh
        - name: pingaccess-init
          mountPath: /logger.lib.sh
          subPath: logger.lib.sh
        - name: pingaccess-init
          mountPath: /wait-for-services.sh
          subPath: wait-for-services.sh
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
      - name: newrelic-tags-exporter
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-monitoring/newrelic-tags-exporter:v2.1.0
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
        env:
        - name: NEW_RELIC_APP_NAME
          value: "pingaccess-admin"
        - name: METADATA_EP_URL
          value: "http://metadata:5000"
        - name: NEW_RELIC_CONFIG_FILEPATH
          value: "/opt/shared-dir/newrelic.yml"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        volumeMounts:
        - name: shared-dir
          mountPath: /opt/shared-dir
      - name: perpetual-license
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess:v2.1.0-RC1
        imagePullPolicy: Always
        command: [ "sh", "-c", "python3 /opt/in/perpetual_license.py" ]
        env:
        - name: PRODUCT_LICENSE_NAME
          value: "pingaccess"
        - name: LICENSE_EMPTY_DIR_PATH
          value: "/opt/license"
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: pingaccess-init
          mountPath: /opt/in/perpetual_license.py
          subPath: perpetual_license.py
        - name: license-dir
          mountPath: /opt/license
      - name: pingaccess-upgrade
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess:v2.1.0-RC1
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args:
          - "-c"
          # The following commands will:
          # 1. Navigate to /opt/staging/hooks directory.
          # 2. Source and execute the PDI team apply_local_server_profile method. This will copy all items from /opt/in to /opt/staging directory.
          # 3. Download server profile (02-get-remote-server-profile.sh).
          # 4. Expand all .subst and .default extensions (05-expand-templates.sh).
          # 5. Upgrade PingAccess server (22-upgrade-server.sh).
          - "cd /opt/staging/hooks && source ./pingcommon.lib.sh && apply_local_server_profile && ./02-get-remote-server-profile.sh && ./05-expand-templates.sh && ./22-upgrade-server.sh"
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: "8Gi"
            cpu: 2
          limits:
            memory: "8Gi"
            cpu: 2            
        volumeMounts:
        - name: ssh-dir
          mountPath: /home/ping/.ssh
        - name: shared-dir
          mountPath: /opt/shared-dir
        - name: data-dir
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: pingaccess-init
          mountPath: /opt/in/hooks/logger.lib.sh
          subPath: logger.lib.sh
        - name: data-dir
          mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - name: data-dir
          mountPath: /opt/staging/newrelic.jar
          subPath: newrelic.jar
        - name: out-dir
          mountPath: /opt/out
        - name: pingaccess-license
          mountPath: /opt/in/instance/conf/pingaccess.lic
          subPath: pingaccess.lic
        - name: data-dir
          mountPath: /opt/staging/ds_env_vars
          subPath: ds_env_vars    
        - name: upgrade-dir
          mountPath: /tmp/instance
          subPath: instance
        - name: license-dir
          mountPath: /opt/license
        ports:
        - containerPort: 9000
        - containerPort: 9090
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingaccess-passwords
              key: OLD_PA_ADMIN_USER_PASSWORD
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingaccess-passwords
              key: PA_ADMIN_USER_PASSWORD
        - name: NEW_RELIC_CONFIG_FILE
          value: "/opt/shared-dir/newrelic.yml"
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
      containers:
      - name: pingaccess-p1as-sso
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        image: public.ecr.aws/r2h3l6e4/pingcloud-services/p14c-integration:v2.1.0-RC1
        imagePullPolicy: Always
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        envFrom:
          - configMapRef:
              name: pingaccess-admin-environment-variables
        command: [ "/bin/sh","-c" ]
        # sso configuration has to be a sidecar instead of init container because it needs pingaccess api to be running
        # Add an infinite sleep after sso configuration so that pingaccess container continues to run
        args: [ "python3 -u /app/oauth_client_services_controller.py --app pingaccess && while true; do sleep 30; done" ]
      - name: pingaccess-admin
        image: public.ecr.aws/r2h3l6e4/pingcloud-apps/pingaccess:v2.1.0-RC1
        imagePullPolicy: Always
        securityContext:
          runAsGroup: 9999
          runAsNonRoot: true
          runAsUser: 9031
          allowPrivilegeEscalation: false
        resources:
          requests:
            memory: "4Gi"
            cpu: 2
          limits:
            memory: "4Gi"
            cpu: 2
        volumeMounts:
        - name: pingaccess-init
          mountPath: /opt/staging/hooks/logger.lib.sh
          subPath: logger.lib.sh
        - name: ssh-dir
          mountPath: /home/ping/.ssh
        - name: shared-dir
          mountPath: /opt/shared-dir
        - name: data-dir
          mountPath: /usr/local/bin/kubectl
          subPath: kubectl
        - name: data-dir
          mountPath: /opt/staging/jmx_prometheus_javaagent-0.14.0.jar
          subPath: jmx_prometheus_javaagent-0.14.0.jar
        - name: data-dir
          mountPath: /opt/staging/newrelic.jar
          subPath: newrelic.jar
        - name: out-dir
          mountPath: /opt/out
        - name: pingaccess-license
          mountPath: /opt/in/instance/conf/pingaccess.lic
          subPath: pingaccess.lic
        - name: data-dir
          mountPath: /opt/staging/ds_env_vars
          subPath: ds_env_vars
        - name: upgrade-dir
          mountPath: /tmp/instance
          subPath: instance
        - name: license-dir
          mountPath: /opt/license
        - name: p1as-sso-secrets
          mountPath: /opt/sso/p1as_secrets
        - name: p1as-sso-configs
          mountPath: /opt/sso/p1as_configs
        readinessProbe:
          exec:
            command: [ /opt/staging/hooks/85-pa-admin-readiness.sh ]
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 3
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: [ /opt/staging/hooks/99-pa-admin-liveness.sh ]
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 4
          timeoutSeconds: 5
        ports:
        - containerPort: 9000
        - containerPort: 9090
        env:
        - name: OPERATIONAL_MODE
          value: CLUSTERED_CONSOLE
        - name: HTTPS_PORT
          value: "9090"
        - name: OLD_PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingaccess-passwords
              key: OLD_PA_ADMIN_USER_PASSWORD
        - name: PA_ADMIN_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pingaccess-passwords
              key: PA_ADMIN_USER_PASSWORD
        - name: NEW_RELIC_CONFIG_FILE
          value: "/opt/shared-dir/newrelic.yml"
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: pingaccess-admin-environment-variables
        - secretRef:
            name: newrelic-license-key
            optional: false
      securityContext:
        fsGroup: 9999
      volumes:
      - name: ssh-dir
        emptyDir: {}
      - name: shared-dir
        emptyDir: {}
      - name: data-dir
        emptyDir: {}
      - name: license-dir
        emptyDir: {}
      - name: upgrade-dir
        emptyDir: {}
      - name: pingaccess-init
        configMap:
          name: pingcommon-init
          defaultMode: 0555
      - name: ssh-id-key-secret
        secret:
          secretName: ssh-id-key-secret
          optional: true
          defaultMode: 0400
      - name: known-hosts-config
        configMap:
          name: known-hosts-config
          optional: true
          defaultMode: 0644
      - name: out-dir
        persistentVolumeClaim:
          claimName: out-dir
      - name: pingaccess-license
        secret:
          secretName: pingaccess-license
          optional: true
          defaultMode: 0400
      - name: pingaccess-passwords
        secret:
          secretName: pingaccess-passwords
          optional: true
          defaultMode: 0400
      - name: p1as-sso-secrets
        secret:
          secretName: pingaccess-admin-p14c
          optional: true
          defaultMode: 0400
      - name: p1as-sso-configs
        configMap:
          name: pingaccess-admin-p14c
          optional: true
          defaultMode: 0400
  volumeClaimTemplates:
  - metadata:
      name: out-dir
      annotations:
        volume.autoscaler.kubernetes.io/ignore: "true"
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: pingaccess-gp3
      resources:
        requests:
          storage: 20Gi
