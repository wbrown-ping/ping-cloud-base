filter {
    if ([kubernetes][container_name] =~ "pingfederate(-admin)?") {
    ### Parse only logs starting from log path.
    ### Everything else(hooks, logs going directly to console, etc) goes to logstash index without any parsing
        if ([log] =~ /^\/opt\/out\/instance\/log/) {
            grok {
                match => {
                    "log" => [ "^\/opt\/out\/instance\/log\/%{DATA:log_name}(\.log)?(\.out)? %{GREEDYDATA:log_string}" ]
                }
                remove_field => ["log"]
            }
            if ([log_string] == "") {
                drop {}
            }
            mutate {
                add_field => {"[@metadata][index]" => "pf-%{log_name}"}
            }
            if ([log_name] == "admin-api" or [log_name] == "runtime-api") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{user}| %{authType}| %{clientIP}| %{httpMethod}| %{url}| %{status}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                gsub => ["clientIP","[\[\]]",""]
              }
            }
            else if ([log_name] == "admin-event-detail") {
              if ![log_string] {
                drop {}
              }
              mutate {
                rename => { "log_string" => "message" }
                gsub => ["message", "/opt/out/instance/log/admin-event-detail.log", ""]
              }
            }
            else if ([log_name] == "admin") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp} | %{user} | %{roles} | %{ip} | %{component} | %{event} | %{eventDetailId} | %{message}"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "pf-admin-log"}
                gsub => ["ip","[\[\]]",""]
              }
            }
            else if ([log_name] == "transaction") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}  | %{host} | %{log_level} | %{event} | Connection ID: %{connectionId} | Virtual Server ID: %{virtualServerId} | %{variable_part}"
                }
                remove_field => ["log_string"]
              }
              if "Sent Response" in [event] {
                grok {
                  match => {
                    "variable_part" => [
                      "(%{URN:urn} \| %{DATA:eventType}( \| SAML ID: %{DATA:samlId})? \| Endpoint: %{DATA:endpoint}( \| SAML Subject: %{DATA:samlSubject})?( \| %{URN:binding})?(\| RelayState: %{DATA:RelayState})?( \| SignaturePolicy: %{DATA:signaturePolicy})?( \| HTTP Request Parameters: %{DATA:HTTP Request Parameters})?( \|%{GREEDYDATA:xmlMessage})?)$"
                    ]
                  }
                  remove_field => ["variable_part"]
                }
              }
              else if "Received Message" in [event] {
                grok {
                  match => {
                    "variable_part" => [
                      "((%{URN:urn} \| )?%{DATA:eventType}( \| SAML ID: %{DATA:samlId})?( \| SAML Subject: %{DATA:samlSubject})?( \| %{URN:binding})?( \| RelayState: %{DATA:RelayState})?( \| SignatureStatus: %{DATA:signatureStatus})?( \|%{GREEDYDATA:xmlMessage})?)$" 
                    ]
                  }
                  remove_field => ["variable_part"]
                }
              }
              else {
                grok {
                  match => {
                    "variable_part" => [ 
                      # "(%{GREEDYDATA:message})$"    
                      # Transport/Recieve (IDP)
                      "(%{URN:urn} \| %{DATA:eventType} \| SAML ID: %{DATA:samlId} (\| SAML Subject: %{DATA:samlSubject})? (\| %{DATA:binding})? (\| SignatureStatus: %{DATA:signatureStatus})? (\|%{DATA:xmlMessage})?)$",
                      # Sent request (IDP)
                      "%({DATA:eventType} \| Endpoint: %{URI:endpoint} (\| %{DATA:binding})? (\| RelayState: %{DATA:RelayState})? (\| SignaturePolicy: %{DATA:signaturePolicy})? (\|%{DATA:xmlMessage})?)$",
                      # Sent Request (IDP)
                      "(%{DATA:eventType} \| Endpoint: %{URI:endpoint} (\| %{DATA:binding})? (\| SignaturePolicy: %{DATA:signaturePolicy})? (\|%{DATA:xmlMessage})?)$",                    
                      # Recieved message (SP)
                      "(%{DATA:eventType} (\| %{DATA:binding})? (\| SignatureStatus: %{DATA:signatureStatus})? (\|%{DATA:xmlMessage})?)$"                    
                    ]
                  }
                  remove_field => ["variable_part"]
                  # remove_field => ["message"]
                }
              }
            }
            else if ([log_name] == "audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{trackingId}| %{event}| %{subject}| %{ip} | %{app}| %{connectionId}| %{protocol}| %{host}| %{role}| %{status}| %{adapterId}| %{description}| %{responseTime->}"
                }
                remove_field => ["log_string"]
              }
              ruby {
                code => '
                    hash = event.to_hash
                    hash.each do |k,v|
	                    if v == "" || v == nil
	                        event.remove(k)
	                    end
                    end
                '
              }
            }
            else if ([log_name] == "provisioner-audit") {
              dissect {
                mapping => {
                  "log_string" => "%{timestamp}| %{cycleId}| %{channelId}| %{eventType}| %{sourceId}| %{targetId}| %{isSuccess}| %{nonSuccessCause}"
                }
                remove_field => ["log_string"]
              }
            }
            else if ([log_name] == "provisioner") {
              grok {
                match => {
                  "log_string" => "%{DATA}[ ]{1,3}%{WORD:logLevel}[ ]{1,3}\[%{NOTSPACE:className}\] %{GREEDYDATA:message}"
                }
                remove_field => ["log_string"]
              }
	          mutate {
	            replace => {"[@metadata][index]" => "pf-provisioner-log"}
	            gsub => ["ip","[\[\]]",""]
	          }
            }
            else if ([log_name] == "server") {
              grok {
                match => {
                  "log_string" => "%{TIMESTAMP_ISO8601:timestamp}( %{DATA:trackingId})? %{WORD:logLevel}[ ]{1,3}\[%{NOTSPACE:className}\] %{GREEDYDATA:message}"
                }
                remove_field => ["log_string"]
              }
            }
            else if ([log_name] == "init") {
              grok {
                match => {
                  "log_string" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:message}"
                }
                remove_field => ["log_string"]
              }
            }
            else if ([log_name] == "jvm-garbage-collection") {
              grok {
                match => {
                  "log_string" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{NUMBER:secondsFromStart}s\]\[%{WORD:logLevel}\]\[%{DATA:categories}\] %{GREEDYDATA:message}"
                }
                remove_field => ["log_string"]
              }
            }
            else if ([log_name] =~ "request") {
              grok {
                match => {
                  "log_string" => "(%{IPORHOST:clientip})? %{HTTPDUSER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|- )( \"%{NOTSPACE:referer}\")?( \"%{NOTSPACE:useragent}\")?"
                }
                remove_field => ["log_string"]
              }
              mutate {
                replace => {"[@metadata][index]" => "pf-request"}
              }
            }
            if ([timestamp]) {
              date {
                match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "HH:mm:ss,SSS", "dd/MMM/yyyy:HH:mm:ss Z", "yyyy-MM-dd HH:mm:ss,SSS"]
                remove_field => ["timestamp"]
              }
            }
            if ([ip]) {
                geoip {
                    source => "ip"
                }
              ### Security Enrichments begin here, ENRICH THE IP ADDRESS DETAIL
                translate {
                    source => "ip"
                    target => "threat_intel"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/AlienVaultIP.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "ip"
                    target => "tor_intel"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/TorNodes.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "[geoip][country_name]"
                    target => "malicious_country"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/MaliciousCountries.yml'
                    refresh_behaviour => "replace"
                }
                translate {
                    source => "[geoip][country_name]"
                    target => "known_country"
                    fallback => "No"
                    dictionary_path => '/enrichment-cache-files/KnownCountries.yml'
                    refresh_behaviour => "replace"
                }
                if([malicious_country] == "No" and [known_country] == "No"){
                    mutate {
                        add_field => { "suspicious_country" => "YES" }
                    }
                }
              #Query for previous logins in OpenSearch, if login is found append data to the log
              #IF A SUCCESSFUL LOGIN OCCURS, Query OS to see if the the attempt was successful in the past to determine distance from previous login.
                if([status] == "success" and [event] == "AUTHN_ATTEMPT" and "_geoip_lookup_failure" not in [tags]){
                    opensearch {
                        index => "pf-audit-read"
                        query_template => "/etc/logstash/templates/6hr-1200km-template.json"
                        hosts       => ["opensearch-ingest.elastic-stack-logging.svc.cluster.local:9200"]
                        user => "${OS_USER}"
                        password => "${OS_PASSWORD}"
                        ssl         => true
                        add_field => {"found_distance_alert" => "YES"}
                        fields => {
                            "subject" => "found_subject"
                            "ip" => "found_ip"
                            "[geoip][country_name]" => "found_country"
                            "[geoip][city_name]" => "found_city_name"
                            "[geoip][latitude]" => "[found_geoip][latitude]"
                            "[geoip][longitude]" => "[found_geoip][longitude]"
                            "[geoip][location]" => "[found_geoip][location]"
                        }
                    }
                    ### transform geoip coordinates to geoshape line between two locations
                    if ([found_distance_alert] == "YES") {
                        mutate {
                            add_field => {"[found_geoip][line]" => "LINESTRING (%{[geoip][longitude]} %{[geoip][latitude]},%{[found_geoip][longitude]} %{[found_geoip][latitude]})"}
                        }
                    }
                }
            }
        }
    }
}