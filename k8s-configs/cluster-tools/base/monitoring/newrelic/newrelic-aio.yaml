---
# Source: p1as-newrelic/templates/namespace.tpl
# Create a namespace only if 'global.pingCloudNamespace' variable present(should be only during PCB deployment)
# Workaround to have the NS created in PCB
kind: Namespace
apiVersion: v1
metadata:
  name: newrelic
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-controlplane
  namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-newrelic-infrastructure
  namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
  name: nri-bundle-newrelic-prometheus-agent
  namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events
  namespace: newrelic
  annotations:

---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-controlplane
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    http_server_enabled: true
    http_server_port: 8001
    is_forward_only: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-controlplane
  namespace: newrelic
data:
  nri-kubernetes.yml: |-
    interval: 30s
    namespaceSelector:
      matchExpressions:
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        - default
        - health
        - kube-node-lease
        - kube-public
        - kube-system
        - pod-reaper
        - newrelic
    controlPlane:
      retries: 3
      timeout: 10s
      enabled: true
      etcd:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
              - url: http://localhost:2381
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=etcd
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
            matchNode: true
            namespace: kube-system
            selector: k8s-app=etcd-manager-main
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:4001
            matchNode: true
            namespace: kube-system
            selector: k8s-app=etcd
        enabled: true
      scheduler:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-scheduler
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-scheduler
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: openshift-kube-scheduler
            selector: app=openshift-kube-scheduler,scheduler=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10259
            matchNode: true
            namespace: kube-system
            selector: app=openshift-kube-scheduler,scheduler=true
        enabled: true
      controllerManager:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-controller-manager
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-controller-manager
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: openshift-kube-controller-manager
            selector: app=kube-controller-manager,kube-controller-manager=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: app=kube-controller-manager,kube-controller-manager=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:10257
            matchNode: true
            namespace: kube-system
            selector: app=controller-manager,controller-manager=true
        enabled: true
      apiServer:
        autodiscover:
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:6443
              - url: http://localhost:8080
            matchNode: true
            namespace: kube-system
            selector: tier=control-plane,component=kube-apiserver
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - url: http://localhost:8080
            matchNode: true
            namespace: kube-system
            selector: k8s-app=kube-apiserver
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:6443
            matchNode: true
            namespace: openshift-kube-apiserver
            selector: app=openshift-kube-apiserver,apiserver=true
          - endpoints:
              - auth:
                  type: bearer
                insecureSkipVerify: true
                url: https://localhost:8443
            matchNode: true
            namespace: kube-system
            selector: app=openshift-kube-apiserver,apiserver=true
        enabled: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/ksm/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-ksm
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    http_server_enabled: true
    http_server_port: 8002
    is_forward_only: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/ksm/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-ksm
  namespace: newrelic
data:
  nri-kubernetes.yml: |-
    interval: 30s
    namespaceSelector:
      matchExpressions:
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        - default
        - health
        - kube-node-lease
        - kube-public
        - kube-system
        - pod-reaper
        - newrelic
    ksm:
      enabled: true
      retries: 3
      scheme: http
      selector: app.kubernetes.io/name=kube-state-metrics
      timeout: 10s
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-agent-kubelet
data:
  newrelic-infra.yml: |-
    # This is the configuration file for the infrastructure agent. See:
    # https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/configuration/infrastructure-agent-configuration-settings/
    custom_attributes:
      clusterName: test-cluster
    enable_process_metrics: true
    features:
      docker_enabled: false
    http_server_enabled: true
    http_server_port: 8003
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/integrations-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-integrations-cfg
data:
  # This ConfigMap holds config files for integrations. They should have the following format:
  #redis-config.yml: |
  #  # Run auto discovery to find pods with label "app=redis"
  #  discovery:
  #    command:
  #      # Run discovery for Kubernetes. Use the following optional arguments:
  #      # --namespaces: Comma separated list of namespaces to discover pods on
  #      # --tls: Use secure (TLS) connection
  #      # --port: Port used to connect to the kubelet. Default is 10255
  #      exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls
  #      match:
  #        label.app: redis
  #  integrations:
  #    - name: nri-redis
  #      env:
  #        # using the discovered IP as the hostname address
  #        HOSTNAME: ${discovery.ip}
  #        PORT: 6379
  #        KEYS: '{"0":["<KEY_1>"],"1":["<KEY_2>"]}'
  #        REMOTE_MONITORING: true
  #      labels:
  #        env: production
  pingmetadata.yaml: |-
    integrations:
      - config:
          apis:
            - event_type: pingmetaDataOutputSample
              jq: .version
              url: http://metadata.ping-cloud:5000
          name: pingmetadata
        interval: 2m
        name: nri-flex
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/scraper-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-kubelet
  namespace: newrelic
data:
  nri-kubernetes.yml: |
    interval: 30s
    namespaceSelector:
      matchExpressions:
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        - default
        - health
        - kube-node-lease
        - kube-public
        - kube-system
        - pod-reaper
        - newrelic
    kubelet:
      enabled: true
      retries: 3
      scraperMaxReruns: 4
      timeout: 10s
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/configmap.yaml
kind: ConfigMap
metadata:
  name: nri-bundle-newrelic-prometheus-agent
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
apiVersion: v1
data:
  config.yaml: |-
    # Configuration for newrelic-prometheus-configurator
    newrelic_remote_write:
      extra_write_relabel_configs:
        - action: drop
          regex: kube_.+|container_.+|machine_.+|cadvisor_.+
          source_labels:
            - __name__
        - action: replace
          regex: timeseries_write_(.*)
          replacement: counter
          separator: ;
          source_labels:
            - __name__
          target_label: newrelic_metric_type
        - action: replace
          regex: sql_byte(.*)
          replacement: counter
          separator: ;
          source_labels:
            - __name__
          target_label: newrelic_metric_type
    static_targets:
      jobs:
        - extra_metric_relabel_config:
            - action: keep
              regex: prometheus_agent_active_series|prometheus_target_interval_length_seconds|prometheus_target_scrape_pool_targets|prometheus_remote_storage_samples_pending|prometheus_remote_storage_samples_in_total|prometheus_remote_storage_samples_retried_total|prometheus_agent_corruptions_total|prometheus_remote_storage_shards|prometheus_sd_kubernetes_events_total|prometheus_agent_checkpoint_creations_failed_total|prometheus_agent_checkpoint_deletions_failed_total|prometheus_remote_storage_samples_dropped_total|prometheus_remote_storage_samples_failed_total|prometheus_sd_kubernetes_http_request_total|prometheus_agent_truncate_duration_seconds_sum|prometheus_build_info|process_resident_memory_bytes|process_virtual_memory_bytes|process_cpu_seconds_total|prometheus_remote_storage_bytes_total
              source_labels:
                - __name__
          job_name: self-metrics
          skip_sharding: true
          targets:
            - localhost:9090
    common:
      external_labels:
        cluster_name: test-cluster
      scrape_interval: 30s
    kubernetes:
      jobs:
        - job_name_prefix: default
          target_discovery:
            endpoints: true
            filter:
              annotations:
                prometheus.io/scrape: true
            pod: true
        - integrations_filter:
            enabled: false
          job_name_prefix: newrelic
          target_discovery:
            endpoints: true
            filter:
              annotations:
                newrelic.io/scrape: true
            pod: true
      integrations_filter:
        app_values:
          - redis
          - traefik
          - calico
          - nginx
          - coredns
          - kube-dns
          - etcd
          - cockroachdb
          - velero
          - harbor
          - argocd
        enabled: true
        source_labels:
          - app.kubernetes.io/name
          - app.newrelic.io/name
          - k8s-app
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events-agent-config
  namespace: newrelic
data:
  newrelic-infra.yml: |
    is_forward_only: true
    http_server_enabled: true
    http_server_port: 8001
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events-config
  namespace: newrelic
data:
  config.yaml: |-
    sinks:
      - name: newRelicInfra
        config:
          agentEndpoint: http://localhost:8001/v1/data
          clusterName: test-cluster
          agentHTTPTimeout: 30s
    captureDescribe: true
    describeRefresh: 24h
    captureEvents: true
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-newrelic-infrastructure
rules:
  - apiGroups: [""]
    resources:
      - "nodes/metrics"
      - "nodes/stats"
      - "nodes/proxy"
    verbs: ["get", "list"]
  - apiGroups: [ "" ]
    resources:
      - "endpoints"
      - "services"
      - "nodes"
      - "namespaces"
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-controlplane
rules:
  - apiGroups: [""]
    resources:
      - "nodes/metrics"
      - "nodes/stats"
      - "nodes/proxy"
    verbs: ["get", "list"]
  - apiGroups: [ "" ]
    resources:
      - "pods"
      - "nodes"
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get", "head"]
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nri-bundle-newrelic-prometheus-agent
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - services
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - namespaces
      - nodes
      - jobs
      - persistentvolumes
      - persistentvolumeclaims
      - pods
      - services
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - watch
      - list
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-newrelic-infrastructure
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-newrelic-infrastructure
subjects:
  - kind: ServiceAccount
    name: nri-bundle-newrelic-infrastructure
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
  name: nri-bundle-nrk8s-controlplane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nrk8s-controlplane
subjects:
  - kind: ServiceAccount
    name: nri-bundle-nrk8s-controlplane
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nri-bundle-newrelic-prometheus-agent
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-newrelic-prometheus-agent
subjects:
  - kind: ServiceAccount
    name: nri-bundle-newrelic-prometheus-agent
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  name: nri-bundle-nri-kube-events
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nri-kube-events
subjects:
  - kind: ServiceAccount
    name: nri-bundle-nri-kube-events
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: nri-bundle-nri-metadata-injection
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/name: nri-metadata-injection
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/controlplane/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
    mode: privileged
  name: nri-bundle-nrk8s-controlplane
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
      app.kubernetes.io/component: controlplane
  template:
    metadata:
      annotations:
        checksum/nri-kubernetes: f06308845e7d3835b7a44c9fc9555af871bdf58cf6e74704bf764ecc2ee8de2d
        checksum/agent-config: 1dde6e957a86f1f061ca8c1a762c23e445e57d0176cf6da0a544dca7dcc81c2f
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        mode: privileged
        app.kubernetes.io/component: controlplane
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: nri-bundle-nrk8s-controlplane
      containers:
        - name: controlplane
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kubernetes:3.17.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2000
            runAsUser: 1000
          env:
            - name: "NRI_KUBERNETES_SINK_HTTP_PORT"
              value: "8001"
            - name: "NRI_KUBERNETES_CLUSTERNAME"
              value: test-cluster
            - name: "NRI_KUBERNETES_VERBOSE"
              value: "false"

            - name: "NRI_KUBERNETES_NODENAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "NRI_KUBERNETES_NODEIP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.hostIP"
          volumeMounts:
            - name: nri-kubernetes-config
              mountPath: /etc/newrelic-infra/nri-kubernetes.yml
              subPath: nri-kubernetes.yml
          resources:
            limits:
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
        - name: forwarder
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.47.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2000
            runAsUser: 1000
          ports:
            - containerPort: 8001
          env:
            - name: "NRIA_LICENSE_KEY"
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY

            - name: "NRIA_DNS_HOSTNAME_RESOLUTION"
              value: "false"

            - name: "K8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: forwarder-tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: forwarder-tmpfs-user-data
            - mountPath: /tmp
              name: forwarder-tmpfs-tmp
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
          resources:
            limits:
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: nri-kubernetes-config
          configMap:
            name: nri-bundle-nrk8s-controlplane
            items:
              - key: nri-kubernetes.yml
                path: nri-kubernetes.yml
        - name: forwarder-tmpfs-data
          emptyDir: {}
        - name: forwarder-tmpfs-user-data
          emptyDir: {}
        - name: forwarder-tmpfs-tmp
          emptyDir: {}
        - name: config
          configMap:
            name: nri-bundle-nrk8s-agent-controlplane
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
              - matchExpressions:
                  - key: node-role.kubernetes.io/controlplane
                    operator: Exists
              - matchExpressions:
                  - key: node-role.kubernetes.io/etcd
                    operator: Exists
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/kubelet/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
    mode: privileged
  name: nri-bundle-nrk8s-kubelet
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
      app.kubernetes.io/component: kubelet
  template:
    metadata:
      annotations:
        checksum/nri-kubernetes: a9f754eb46e131d5147b7c61a9b678f28df65c3f97ccb7cc1e8318ea16b8533e
        checksum/agent-config: cd36e8e618d56a836234f184e77141a3c2a97b88095917c2ceafe07a16a5deb8
        checksum/integrations_config: e38299779e980abc1c5b138caab1429671a77af6564c10102d89ecb752355a0c
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        mode: privileged
        app.kubernetes.io/component: kubelet
    spec:
      serviceAccountName: nri-bundle-newrelic-infrastructure
      hostNetwork: false
      containers:
        - name: kubelet
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kubernetes:3.17.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2000
            runAsUser: 1000
          env:
            - name: "NRI_KUBERNETES_SINK_HTTP_PORT"
              value: "8003"
            - name: "NRI_KUBERNETES_CLUSTERNAME"
              value: test-cluster
            - name: "NRI_KUBERNETES_VERBOSE"
              value: "false"

            - name: "NRI_KUBERNETES_NODENAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            # Required to connect to the kubelet
            - name: "NRI_KUBERNETES_NODEIP"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.hostIP"
          volumeMounts:
            - name: nri-kubernetes-config
              mountPath: /etc/newrelic-infra/nri-kubernetes.yml
              subPath: nri-kubernetes.yml
          resources:
            limits:
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
        - name: agent
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/infrastructure-bundle:3.2.16"
          args: [ "newrelic-infra" ]
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsUser: 0
          ports:
            - containerPort: 8003
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY

            - name: "NRIA_OVERRIDE_HOSTNAME_SHORT"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"

            - name: "NRIA_OVERRIDE_HOSTNAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"

            - name: "NRI_KUBERNETES_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
            - name: "CLUSTER_NAME"
              value: test-cluster
            - name: "NRIA_PASSTHROUGH_ENVIRONMENT"
              value: "CLUSTER_NAME"
            - name: "NRIA_HOST"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "status.hostIP"
          volumeMounts:
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
            - name: nri-integrations-cfg-volume
              mountPath: /etc/newrelic-infra/integrations.d/
            - name: dev
              mountPath: /dev
            - name: host-containerd-socket
              mountPath: /run/containerd/containerd.sock
            - name: host-docker-socket
              mountPath: /var/run/docker.sock
            - name: log
              mountPath: /var/log
            - name: host-volume
              mountPath: /host
              readOnly: true
            - mountPath: /var/db/newrelic-infra/data
              name: agent-tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: agent-tmpfs-user-data
            - mountPath: /tmp
              name: agent-tmpfs-tmp
          resources:
            limits:
              memory: 300M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: dev
          hostPath:
            path: /dev
        - name: host-containerd-socket
          hostPath:
            path: /run/containerd/containerd.sock
        - name: host-docker-socket
          hostPath:
            path: /var/run/docker.sock
        - name: log
          hostPath:
            path: /var/log
        - name: host-volume
          hostPath:
            path: /
        - name: agent-tmpfs-data
          emptyDir: {}
        - name: agent-tmpfs-user-data
          emptyDir: {}
        - name: agent-tmpfs-tmp
          emptyDir: {}
        - name: nri-kubernetes-config
          configMap:
            name: nri-bundle-nrk8s-kubelet
            items:
              - key: nri-kubernetes.yml
                path: nri-kubernetes.yml
        - name: config
          configMap:
            name: nri-bundle-nrk8s-agent-kubelet
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
        - name: nri-integrations-cfg-volume
          configMap:
            name: nri-bundle-nrk8s-integrations-cfg
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-infrastructure/templates/ksm/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-infrastructure
    app.kubernetes.io/version: 3.17.0
    helm.sh/chart: newrelic-infrastructure-3.22.0
    mode: privileged
  name: nri-bundle-nrk8s-ksm
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-infrastructure
      app.kubernetes.io/component: ksm
  template:
    metadata:
      annotations:
        checksum/nri-kubernetes: 8e953ee663fd1219a01e13477f3948f9820842b6b42f22fc36a5b17b648e9d2b
        checksum/agent-config: c8b017d1fba11a65690e4ce0deb076a0a7fe2c1dbc8767f31fa21fa1c93fbb21
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-infrastructure
        mode: privileged
        app.kubernetes.io/component: ksm
    spec:
      serviceAccountName: nri-bundle-newrelic-infrastructure
      hostNetwork: false
      containers:
        - name: ksm
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kubernetes:3.17.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2000
            runAsUser: 1000
          env:
            - name: "NRI_KUBERNETES_SINK_HTTP_PORT"
              value: "8002"
            - name: "NRI_KUBERNETES_CLUSTERNAME"
              value: test-cluster
            - name: "NRI_KUBERNETES_VERBOSE"
              value: "false"

            - name: "NRI_KUBERNETES_NODENAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
          volumeMounts:
            - name: nri-kubernetes-config
              mountPath: /etc/newrelic-infra/nri-kubernetes.yml
              subPath: nri-kubernetes.yml
          resources:
            limits:
              memory: 850M
            requests:
              cpu: 100m
              memory: 150M
        - name: forwarder
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.47.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2000
            runAsUser: 1000
          ports:
            - containerPort: 8002
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY

            - name: "NRIA_DNS_HOSTNAME_RESOLUTION"
              value: "false"

            - name: "K8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  apiVersion: "v1"
                  fieldPath: "spec.nodeName"
          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: forwarder-tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: forwarder-tmpfs-user-data
            - mountPath: /tmp
              name: forwarder-tmpfs-tmp
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
          resources:
            limits:
              memory: 850M
            requests:
              cpu: 100m
              memory: 150M
      volumes:
        - name: nri-kubernetes-config
          configMap:
            name: nri-bundle-nrk8s-ksm
            items:
              - key: nri-kubernetes.yml
                path: nri-kubernetes.yml
        - name: forwarder-tmpfs-data
          emptyDir: {}
        - name: forwarder-tmpfs-user-data
          emptyDir: {}
        - name: forwarder-tmpfs-tmp
          emptyDir: {}
        - name: config
          configMap:
            name: nri-bundle-nrk8s-agent-ksm
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: kube-state-metrics
                topologyKey: kubernetes.io/hostname
              weight: 100
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-kube-events/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-nri-kube-events
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-kube-events
    app.kubernetes.io/version: 2.2.2
    helm.sh/chart: nri-kube-events-3.2.0
  annotations:
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-kube-events
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-kube-events
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: kube-events
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/nri-kube-events:2.2.2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          args: ["-config", "/app/config/config.yaml", "-loglevel", "debug"]
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
        - name: forwarder
          image: public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-events-forwarder:1.43.1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8001
          env:
            - name: NRIA_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY

            - name: NRIA_OVERRIDE_HOSTNAME_SHORT
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName

          volumeMounts:
            - mountPath: /var/db/newrelic-infra/data
              name: tmpfs-data
            - mountPath: /var/db/newrelic-infra/user_data
              name: tmpfs-user-data
            - mountPath: /tmp
              name: tmpfs-tmp
            - name: config
              mountPath: /etc/newrelic-infra.yml
              subPath: newrelic-infra.yml
      serviceAccountName: nri-bundle-nri-kube-events
      volumes:
        - name: config
          configMap:
            name: nri-bundle-nri-kube-events-agent-config
            items:
              - key: newrelic-infra.yml
                path: newrelic-infra.yml
        - name: config-volume
          configMap:
            name: nri-bundle-nri-kube-events-config
        - name: tmpfs-data
          emptyDir: {}
        - name: tmpfs-user-data
          emptyDir: {}
        - name: tmpfs-tmp
          emptyDir: {}
      hostNetwork: false
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nri-bundle-nri-metadata-injection
  namespace: newrelic
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nri-metadata-injection
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: nri-metadata-injection
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
      hostNetwork: false
      containers:
        - name: nri-metadata-injection
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/k8s-metadata-injection:1.15.0"
          imagePullPolicy: IfNotPresent
          env:
            - name: clusterName
              value: test-cluster
          ports:
            - containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: tls-key-cert-pair
              mountPath: /etc/tls-key-cert-pair
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 1
          resources:

            limits:
              memory: 80M
            requests:
              cpu: 100m
              memory: 30M
      volumes:
        - name: tls-key-cert-pair
          secret:
            secretName: nri-bundle-nri-metadata-injection-admission
---
# Source: p1as-newrelic/charts/nri-bundle/charts/newrelic-prometheus-agent/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: newrelic-prometheus-agent
    app.kubernetes.io/version: v2.37.8
    helm.sh/chart: newrelic-prometheus-agent-1.3.0
  name: nri-bundle-newrelic-prometheus-agent
  namespace: newrelic
spec:
  serviceName: nri-bundle-newrelic-prometheus-agent-headless
  selector:
    matchLabels:
      app.kubernetes.io/instance: nri-bundle
      app.kubernetes.io/name: newrelic-prometheus-agent
  replicas: 1
  template:
    metadata:
      annotations:
        checksum/config: fea4e80ee8f16b381964d3beaa701ae03f402d6431c14a5ff00a02324ddec939
      labels:
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/name: newrelic-prometheus-agent
    spec:

      hostNetwork: false

      serviceAccountName: nri-bundle-newrelic-prometheus-agent

      initContainers:
        - name: configurator
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/newrelic/newrelic-prometheus-configurator:1.6.0"
          imagePullPolicy: IfNotPresent
          args:
            - --input=/etc/configurator/config.yaml
            - --output=/etc/prometheus/config/config.yaml
          volumeMounts:
            - name: configurator-config
              mountPath: /etc/configurator/
            - name: prometheus-config
              mountPath: /etc/prometheus/config
          env:
            - name: NR_PROM_DATA_SOURCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NR_PROM_LICENSE_KEY
              valueFrom:
                secretKeyRef:
                  name: newrelic-license-key
                  key: NEW_RELIC_LICENSE_KEY
            - name: NR_PROM_CHART_VERSION
              value: 1.3.0

      containers:
        - name: prometheus
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/prom/prometheus:v2.37.8"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9090
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          args:
            - --config.file=/etc/prometheus/config/config.yaml
            - --enable-feature=agent,expand-external-labels
            - --storage.agent.retention.max-time=30m
            - --storage.agent.wal-truncate-frequency=30m
            - --storage.agent.path=/etc/prometheus/storage
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/config
            - name: prometheus-storage
              mountPath: /etc/prometheus/storage

      volumes:
        - name: configurator-config
          configMap:
            name: nri-bundle-newrelic-prometheus-agent
        - name: prometheus-config
          emptyDir: {}
        - name: prometheus-storage
          emptyDir: {}
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/mutatingWebhookConfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: nri-bundle-nri-metadata-injection
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
webhooks:
  - name: metadata-injection.newrelic.com
    clientConfig:
      service:
        name: nri-bundle-nri-metadata-injection
        namespace: newrelic
        path: "/mutate"
      caBundle: ""
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Ignore
    timeoutSeconds: 28
    sideEffects: None
    admissionReviewVersions: ["v1", "v1beta1"]
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nri-bundle-nri-metadata-injection-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - mutatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nri-bundle-nri-metadata-injection-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
    app: nri-metadata-injection-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nri-bundle-nri-metadata-injection-admission
subjects:
  - kind: ServiceAccount
    name: nri-bundle-nri-metadata-injection-admission
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nri-bundle-nri-metadata-injection-admission
  namespace: newrelic
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nri-bundle-nri-metadata-injection-admission
subjects:
  - kind: ServiceAccount
    name: nri-bundle-nri-metadata-injection-admission
    namespace: newrelic
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: nri-bundle-nri-metadata-injection-admission-create
  namespace: newrelic
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission-create
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
spec:
  template:
    metadata:
      name: nri-bundle-nri-metadata-injection-admission-create
      labels:
        app: nri-metadata-injection-admission-create
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.15.0
        helm.sh/chart: nri-metadata-injection-4.7.0
    spec:
      containers:
        - name: create
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/ingress-nginx/kube-webhook-certgen:v1.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=nri-bundle-nri-metadata-injection,nri-bundle-nri-metadata-injection.newrelic.svc
            - --namespace=newrelic
            - --secret-name=nri-bundle-nri-metadata-injection-admission
            - --cert-name=tls.crt
            - --key-name=tls.key
      restartPolicy: OnFailure
      serviceAccountName: nri-bundle-nri-metadata-injection-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: p1as-newrelic/charts/nri-bundle/charts/nri-metadata-injection/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: nri-bundle-nri-metadata-injection-admission-patch
  namespace: newrelic
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    app: nri-metadata-injection-admission-patch
    app.kubernetes.io/instance: nri-bundle
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nri-metadata-injection
    app.kubernetes.io/version: 1.15.0
    helm.sh/chart: nri-metadata-injection-4.7.0
spec:
  template:
    metadata:
      name: nri-bundle-nri-metadata-injection-admission-patch
      labels:
        app: nri-metadata-injection-admission-patch
        app.kubernetes.io/instance: nri-bundle
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: nri-metadata-injection
        app.kubernetes.io/version: 1.15.0
        helm.sh/chart: nri-metadata-injection-4.7.0
    spec:
      containers:
        - name: patch
          image: "public.ecr.aws/r2h3l6e4/pingcloud-clustertools/ingress-nginx/kube-webhook-certgen:v1.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=nri-bundle-nri-metadata-injection
            - --namespace=newrelic
            - --secret-name=nri-bundle-nri-metadata-injection-admission
            - --patch-failure-policy=Ignore
            - --patch-validating=false
      restartPolicy: OnFailure
      serviceAccountName: nri-bundle-nri-metadata-injection-admission
      securityContext:
        runAsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
