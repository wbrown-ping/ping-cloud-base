---
# Source: thanos/templates/bucketweb/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-bucketweb
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: bucketweb
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: bucketweb
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 8080
        - port: 8080
---
# Source: thanos/templates/compactor/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-compactor
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: compactor
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: compactor
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10902
        - port: 9090
---
# Source: thanos/templates/query-frontend/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-query-frontend
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query-frontend
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query-frontend
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 9090
        - port: 9090
---
# Source: thanos/templates/query/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-query
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10902
        - port: 10901
        - port: 9090
        - port: 10901
---
# Source: thanos/templates/receive/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-receive
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: receive
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10902
        - port: 10902
        - port: 10901
        - port: 10901
        - port: 19291
        - port: 19291
---
# Source: thanos/templates/ruler/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-ruler
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: ruler
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: ruler
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10902
        - port: 9090
        - port: 10901
        - port: 10901
---
# Source: thanos/templates/storegateway/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: thanos-storegateway
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: storegateway
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: storegateway
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 10902
        - port: 9090
        - port: 10901
        - port: 10901
---
# Source: thanos/templates/receive/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: thanos-receive
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: receive
---
# Source: thanos/templates/compactor/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-compactor
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: compactor
automountServiceAccountToken: false
---
# Source: thanos/templates/query-frontend/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-query-frontend
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query-frontend
automountServiceAccountToken: false
---
# Source: thanos/templates/query/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-query
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query
automountServiceAccountToken: false
---
# Source: thanos/templates/receive/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-receive
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
automountServiceAccountToken: false
---
# Source: thanos/templates/storegateway/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: thanos-storegateway
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: storegateway
automountServiceAccountToken: false
---
# Source: thanos/templates/receive/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: thanos-receive
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
data:
  hashrings.json: |-
    [
      {
        "endpoints": [
          "thanos-receive-0.thanos-receive-headless.prometheus.svc.cluster.local:10901",
          "thanos-receive-1.thanos-receive-headless.prometheus.svc.cluster.local:10901",
          "thanos-receive-2.thanos-receive-headless.prometheus.svc.cluster.local:10901"
        ]
      }
    ]
---
# Source: thanos/templates/compactor/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-compactor
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: compactor
    prometheus-operator/monitor: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: compactor
---
# Source: thanos/templates/query-frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-query-frontend
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query-frontend
    prometheus-operator/monitor: 'true'
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: query-frontend
---
# Source: thanos/templates/query/service-grpc.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-query-grpc
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query
spec:
  type: ClusterIP
  ports:
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: query
---
# Source: thanos/templates/query/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-query
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query
    prometheus-operator/monitor: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: query
---
# Source: thanos/templates/receive/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-receive-headless
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 10902
      targetPort: http
      protocol: TCP
      name: http
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: receive
---
# Source: thanos/templates/receive/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-receive
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
    prometheus-operator/monitor: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 10902
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
      nodePort: null
    - port: 19291
      targetPort: remote-write
      protocol: TCP
      name: remote
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: receive
---
# Source: thanos/templates/storegateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: thanos-storegateway
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: storegateway
    prometheus-operator/monitor: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: http
      protocol: TCP
      name: http
      nodePort: null
    - port: 10901
      targetPort: grpc
      protocol: TCP
      name: grpc
      nodePort: null
  selector:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/name: thanos
    app.kubernetes.io/component: storegateway
---
# Source: thanos/templates/compactor/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-compactor
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: compactor
  annotations:
    prometheus.io/path: "/"                                                                                                                                                                                                │
    prometheus.io/port: "8080"                                                                                                                                                                                             │
    prometheus.io/scrape: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: compactor
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: thanos
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: thanos
        app.kubernetes.io/version: 0.35.0
        helm.sh/chart: thanos-15.5.0
        app.kubernetes.io/component: compactor
    spec:
      
      serviceAccountName: thanos-compactor
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: thanos
                    app.kubernetes.io/name: thanos
                    app.kubernetes.io/component: compactor
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: compactor
          image: docker.io/bitnami/thanos:0.35.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - compact
            - --log.level=info
            - --log.format=logfmt
            - --http-address=0.0.0.0:10902
            - --data-dir=/data
            - --retention.resolution-raw=15d
            - --retention.resolution-5m=15d
            - --retention.resolution-1h=15d
            - --consistency-delay=30m
            - --objstore.config-file=/conf/objstore.yml
            - --wait
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 1024Mi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
            - name: objstore-config
              mountPath: /conf
            - name: data
              mountPath: /data
      volumes:
        - name: objstore-config
          secret:
            secretName: thanos-objstore-config
        - name: data
          emptyDir: {}
---
# Source: thanos/templates/query-frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-query-frontend
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: thanos
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: thanos
        app.kubernetes.io/version: 0.35.0
        helm.sh/chart: thanos-15.5.0
        app.kubernetes.io/component: query-frontend
    spec:
      
      serviceAccountName: thanos-query-frontend
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: thanos
                    app.kubernetes.io/name: thanos
                    app.kubernetes.io/component: query-frontend
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: query-frontend
          image: quay.io/thanos/thanos:v0.35.1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - query-frontend
            - --log.level=info
            - --log.format=logfmt
            - --http-address=0.0.0.0:9090
            - --query-frontend.downstream-url=http://thanos-query:9090
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 16Gi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
      volumes:
---
# Source: thanos/templates/query/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: thanos-query
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: query
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: thanos
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: thanos
        app.kubernetes.io/version: 0.35.0
        helm.sh/chart: thanos-15.5.0
        app.kubernetes.io/component: query
    spec:
      
      serviceAccountName: thanos-query
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: thanos
                    app.kubernetes.io/name: thanos
                    app.kubernetes.io/component: query
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: query
          image: docker.io/bitnami/thanos:0.35.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - query
            - --log.level=info
            - --log.format=logfmt
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            - --query.replica-label=replica_cluster_name
            - --query.replica-label=prometheus_replica
            - --query.replica-label=replica
            - --endpoint=dnssrv+_grpc._tcp.thanos-storegateway.prometheus.svc.cluster.local
            - --endpoint=dnssrv+_grpc._tcp.thanos-receive-headless.prometheus.svc.cluster.local
            - --alert.query-url=http://thanos-query.prometheus.svc.cluster.local:9090
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 1024Mi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
      volumes:
---
# Source: thanos/templates/receive/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-receive
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: receive
spec:
  replicas: 3
  revisionHistoryLimit: 10
  podManagementPolicy: Parallel
  serviceName: thanos-receive-headless
  updateStrategy:
    type: RollingUpdate
  minReadySeconds: 120
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: receive
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: thanos
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: thanos
        app.kubernetes.io/version: 0.35.0
        helm.sh/chart: thanos-15.5.0
        app.kubernetes.io/component: receive
      annotations:
        checksum/receive-configuration: 7599a212542718382719555619c160ff5f799fb3b0e9576197507ba4dc693d2b
    spec:
      
      serviceAccountName: thanos-receive
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: thanos
                  app.kubernetes.io/name: thanos
                  app.kubernetes.io/component: receive
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: receive
              app.kubernetes.io/instance: thanos
              app.kubernetes.io/name: thanos
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
      containers:
        - name: receive
          image: docker.io/bitnami/thanos:0.35.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - receive
            - --log.level=info
            - --log.format=logfmt
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            - --remote-write.address=0.0.0.0:19291
            - --objstore.config=$(OBJSTORE_CONFIG)
            - --tsdb.path=/var/thanos/receive
            - --label=replica="$(NAME)"
            - --label=receive="true"
            - --tsdb.retention=8h
            - --receive.local-endpoint=$(NAME).thanos-receive-headless.$(NAMESPACE).svc.cluster.local:10901
            - --receive.hashrings-file=/var/lib/thanos-receive/hashrings.json
            - --receive.replication-factor=3
            - --receive-forward-timeout=5m
          env:
            - name: NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: OBJSTORE_CONFIG
              valueFrom:
                secretKeyRef:
                  key: objstore.yml
                  name: thanos-objstore-config
          ports:
            - containerPort: 10901
              name: grpc
              protocol: TCP
            - containerPort: 10902
              name: http
              protocol: TCP
            - containerPort: 19291
              name: remote-write
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: "3.0"
              ephemeral-storage: 1024Mi
              memory: 6144Mi
            requests:
              cpu: "1.5"
              ephemeral-storage: 50Mi
              memory: 4096Mi
          volumeMounts:
            - name: hashring-config
              mountPath: /var/lib/thanos-receive
            - name: data
              mountPath: /var/thanos/receive
      volumes:
        - name: hashring-config
          configMap:
            name: thanos-receive
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
        storageClassName: prometheus-gp3
---
# Source: thanos/templates/storegateway/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: thanos-storegateway
  namespace: prometheus
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    app.kubernetes.io/component: storegateway
spec:
  replicas: 1
  revisionHistoryLimit: 10
  podManagementPolicy: OrderedReady
  serviceName: thanos-storegateway-headless
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: storegateway
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: thanos
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: thanos
        app.kubernetes.io/version: 0.35.0
        helm.sh/chart: thanos-15.5.0
        app.kubernetes.io/component: storegateway
    spec:
      
      serviceAccountName: thanos-storegateway
      automountServiceAccountToken: true
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: thanos
                    app.kubernetes.io/name: thanos
                    app.kubernetes.io/component: storegateway
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      containers:
        - name: storegateway
          image: docker.io/bitnami/thanos:0.35.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          args:
            - store
            - --log.level=info
            - --log.format=logfmt
            - --grpc-address=0.0.0.0:10901
            - --http-address=0.0.0.0:10902
            - --data-dir=/data
            - --objstore.config-file=/conf/objstore.yml
          ports:
            - name: http
              containerPort: 10902
              protocol: TCP
            - name: grpc
              containerPort: 10901
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/healthy
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
            httpGet:
              path: /-/ready
              port: http
              scheme: HTTP
          resources:
            limits:
              cpu: "1.5"
              ephemeral-storage: 1024Mi
              memory: 3072Mi
            requests:
              cpu: "1.0"
              ephemeral-storage: 50Mi
              memory: 2048Mi
          volumeMounts:
            - name: objstore-config
              mountPath: /conf
            - name: data
              mountPath: /data
      volumes:
        - name: objstore-config
          secret:
            secretName: thanos-objstore-config
        - name: data
          emptyDir: {}
---
# Source: thanos/templates/compactor/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: thanos-compactor
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    prometheus: agent
    app.kubernetes.io/component: compactor
spec:
  jobLabel: thanos
  endpoints:
    - port: http
  namespaceSelector:
    matchNames:
      - "prometheus"
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: compactor
      prometheus-operator/monitor: 'true'
---
# Source: thanos/templates/query-frontend/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: thanos-query-frontend
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    prometheus: agent
    app.kubernetes.io/component: query-frontend
spec:
  jobLabel: thanos
  endpoints:
    - port: http
  namespaceSelector:
    matchNames:
      - "prometheus"
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query-frontend
      prometheus-operator/monitor: 'true'
---
# Source: thanos/templates/query/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: thanos-query
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    prometheus: agent
    app.kubernetes.io/component: query
spec:
  jobLabel: thanos
  endpoints:
    - port: http
  namespaceSelector:
    matchNames:
      - "prometheus"
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: query
      prometheus-operator/monitor: 'true'
---
# Source: thanos/templates/receive/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: thanos-receive
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    prometheus: agent
    app.kubernetes.io/component: receive
spec:
  jobLabel: thanos
  endpoints:
    - port: http
  namespaceSelector:
    matchNames:
      - "prometheus"
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: receive
      prometheus-operator/monitor: 'true'
---
# Source: thanos/templates/storegateway/servicemonitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: thanos-storegateway
  namespace: "prometheus"
  labels:
    app.kubernetes.io/instance: thanos
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: thanos
    app.kubernetes.io/version: 0.35.0
    helm.sh/chart: thanos-15.5.0
    prometheus: agent
    app.kubernetes.io/component: storegateway
spec:
  jobLabel: thanos
  endpoints:
    - port: http
  namespaceSelector:
    matchNames:
      - "prometheus"
  selector:
    matchLabels:
      app.kubernetes.io/instance: thanos
      app.kubernetes.io/name: thanos
      app.kubernetes.io/component: storegateway
      prometheus-operator/monitor: 'true'
